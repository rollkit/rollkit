// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// ExecuteTxs provides a mock function for the type MockExecutor
func (_mock *MockExecutor) ExecuteTxs(ctx context.Context, txs [][]byte, blockHeight uint64, timestamp time.Time, prevStateRoot []byte) ([]byte, uint64, error) {
	ret := _mock.Called(ctx, txs, blockHeight, timestamp, prevStateRoot)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTxs")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, time.Time, []byte) ([]byte, uint64, error)); ok {
		return returnFunc(ctx, txs, blockHeight, timestamp, prevStateRoot)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, [][]byte, uint64, time.Time, []byte) []byte); ok {
		r0 = returnFunc(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, [][]byte, uint64, time.Time, []byte) uint64); ok {
		r1 = returnFunc(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		r1 = ret.Get(1).(uint64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, [][]byte, uint64, time.Time, []byte) error); ok {
		r2 = returnFunc(ctx, txs, blockHeight, timestamp, prevStateRoot)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockExecutor_ExecuteTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTxs'
type MockExecutor_ExecuteTxs_Call struct {
	*mock.Call
}

// ExecuteTxs is a helper method to define mock.On call
//   - ctx context.Context
//   - txs [][]byte
//   - blockHeight uint64
//   - timestamp time.Time
//   - prevStateRoot []byte
func (_e *MockExecutor_Expecter) ExecuteTxs(ctx interface{}, txs interface{}, blockHeight interface{}, timestamp interface{}, prevStateRoot interface{}) *MockExecutor_ExecuteTxs_Call {
	return &MockExecutor_ExecuteTxs_Call{Call: _e.mock.On("ExecuteTxs", ctx, txs, blockHeight, timestamp, prevStateRoot)}
}

func (_c *MockExecutor_ExecuteTxs_Call) Run(run func(ctx context.Context, txs [][]byte, blockHeight uint64, timestamp time.Time, prevStateRoot []byte)) *MockExecutor_ExecuteTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 [][]byte
		if args[1] != nil {
			arg1 = args[1].([][]byte)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 []byte
		if args[4] != nil {
			arg4 = args[4].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockExecutor_ExecuteTxs_Call) Return(updatedStateRoot []byte, maxBytes uint64, err error) *MockExecutor_ExecuteTxs_Call {
	_c.Call.Return(updatedStateRoot, maxBytes, err)
	return _c
}

func (_c *MockExecutor_ExecuteTxs_Call) RunAndReturn(run func(ctx context.Context, txs [][]byte, blockHeight uint64, timestamp time.Time, prevStateRoot []byte) ([]byte, uint64, error)) *MockExecutor_ExecuteTxs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxs provides a mock function for the type MockExecutor
func (_mock *MockExecutor) GetTxs(ctx context.Context) ([][]byte, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTxs")
	}

	var r0 [][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([][]byte, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) [][]byte); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExecutor_GetTxs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxs'
type MockExecutor_GetTxs_Call struct {
	*mock.Call
}

// GetTxs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockExecutor_Expecter) GetTxs(ctx interface{}) *MockExecutor_GetTxs_Call {
	return &MockExecutor_GetTxs_Call{Call: _e.mock.On("GetTxs", ctx)}
}

func (_c *MockExecutor_GetTxs_Call) Run(run func(ctx context.Context)) *MockExecutor_GetTxs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockExecutor_GetTxs_Call) Return(bytess [][]byte, err error) *MockExecutor_GetTxs_Call {
	_c.Call.Return(bytess, err)
	return _c
}

func (_c *MockExecutor_GetTxs_Call) RunAndReturn(run func(ctx context.Context) ([][]byte, error)) *MockExecutor_GetTxs_Call {
	_c.Call.Return(run)
	return _c
}

// InitChain provides a mock function for the type MockExecutor
func (_mock *MockExecutor) InitChain(ctx context.Context, genesisTime time.Time, initialHeight uint64, chainID string) ([]byte, uint64, error) {
	ret := _mock.Called(ctx, genesisTime, initialHeight, chainID)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 []byte
	var r1 uint64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, uint64, string) ([]byte, uint64, error)); ok {
		return returnFunc(ctx, genesisTime, initialHeight, chainID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, uint64, string) []byte); ok {
		r0 = returnFunc(ctx, genesisTime, initialHeight, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, uint64, string) uint64); ok {
		r1 = returnFunc(ctx, genesisTime, initialHeight, chainID)
	} else {
		r1 = ret.Get(1).(uint64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, time.Time, uint64, string) error); ok {
		r2 = returnFunc(ctx, genesisTime, initialHeight, chainID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockExecutor_InitChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitChain'
type MockExecutor_InitChain_Call struct {
	*mock.Call
}

// InitChain is a helper method to define mock.On call
//   - ctx context.Context
//   - genesisTime time.Time
//   - initialHeight uint64
//   - chainID string
func (_e *MockExecutor_Expecter) InitChain(ctx interface{}, genesisTime interface{}, initialHeight interface{}, chainID interface{}) *MockExecutor_InitChain_Call {
	return &MockExecutor_InitChain_Call{Call: _e.mock.On("InitChain", ctx, genesisTime, initialHeight, chainID)}
}

func (_c *MockExecutor_InitChain_Call) Run(run func(ctx context.Context, genesisTime time.Time, initialHeight uint64, chainID string)) *MockExecutor_InitChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 uint64
		if args[2] != nil {
			arg2 = args[2].(uint64)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockExecutor_InitChain_Call) Return(stateRoot []byte, maxBytes uint64, err error) *MockExecutor_InitChain_Call {
	_c.Call.Return(stateRoot, maxBytes, err)
	return _c
}

func (_c *MockExecutor_InitChain_Call) RunAndReturn(run func(ctx context.Context, genesisTime time.Time, initialHeight uint64, chainID string) ([]byte, uint64, error)) *MockExecutor_InitChain_Call {
	_c.Call.Return(run)
	return _c
}

// SetFinal provides a mock function for the type MockExecutor
func (_mock *MockExecutor) SetFinal(ctx context.Context, blockHeight uint64) error {
	ret := _mock.Called(ctx, blockHeight)

	if len(ret) == 0 {
		panic("no return value specified for SetFinal")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = returnFunc(ctx, blockHeight)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockExecutor_SetFinal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFinal'
type MockExecutor_SetFinal_Call struct {
	*mock.Call
}

// SetFinal is a helper method to define mock.On call
//   - ctx context.Context
//   - blockHeight uint64
func (_e *MockExecutor_Expecter) SetFinal(ctx interface{}, blockHeight interface{}) *MockExecutor_SetFinal_Call {
	return &MockExecutor_SetFinal_Call{Call: _e.mock.On("SetFinal", ctx, blockHeight)}
}

func (_c *MockExecutor_SetFinal_Call) Run(run func(ctx context.Context, blockHeight uint64)) *MockExecutor_SetFinal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_SetFinal_Call) Return(err error) *MockExecutor_SetFinal_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockExecutor_SetFinal_Call) RunAndReturn(run func(ctx context.Context, blockHeight uint64) error) *MockExecutor_SetFinal_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockExecutor
func (_mock *MockExecutor) Rollback(ctx context.Context, currentHeight uint64) ([]byte, error) {
	ret := _mock.Called(ctx, currentHeight)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) ([]byte, error)); ok {
		return returnFunc(ctx, currentHeight)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint64) []byte); ok {
		r0 = returnFunc(ctx, currentHeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = returnFunc(ctx, currentHeight)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockExecutor_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockExecutor_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - currentHeight uint64
func (_e *MockExecutor_Expecter) Rollback(ctx interface{}, currentHeight interface{}) *MockExecutor_Rollback_Call {
	return &MockExecutor_Rollback_Call{Call: _e.mock.On("Rollback", ctx, currentHeight)}
}

func (_c *MockExecutor_Rollback_Call) Run(run func(ctx context.Context, currentHeight uint64)) *MockExecutor_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint64
		if args[1] != nil {
			arg1 = args[1].(uint64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockExecutor_Rollback_Call) Return(previousStateRoot []byte, err error) *MockExecutor_Rollback_Call {
	_c.Call.Return(previousStateRoot, err)
	return _c
}

func (_c *MockExecutor_Rollback_Call) RunAndReturn(run func(ctx context.Context, currentHeight uint64) ([]byte, error)) *MockExecutor_Rollback_Call {
	_c.Call.Return(run)
	return _c
}
