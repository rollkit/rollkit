# Tests / Code Coverage workflow
# This workflow is triggered by ci_release.yml workflow
name: Tests / Code Coverage
on:
  workflow_call:
    inputs:
      image-tag:
        required: true
        type: string

jobs:
  build-ev-node-image:
    name: Build Rollkit Docker Image
    # skip building images for merge groups as they are already built on PRs and main
    if: github.event_name != 'merge_group'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ev-node Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository_owner }}/evstack:${{ inputs.image-tag }}

  build-ev-node-evm-single-image:
    name: Build ev-node EVM Single Docker Image
    # skip building images for merge groups as they are already built on PRs and main
    if: github.event_name != 'merge_group'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ev-node-evm-single Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/evm/single/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository_owner }}/ev-node-evm-single:${{ inputs.image-tag }}

  docker-tests:
    name: Docker E2E Tests
    needs: build-ev-node-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./test/docker-e2e/go.mod
      - name: Run Docker E2E Tests
        run: make test-docker-e2e-celestia
        env:
          EV_NODE_IMAGE_REPO: ghcr.io/${{ github.repository }}
          EV_NODE_IMAGE_TAG: ${{ inputs.image-tag }}

  docker-compose-e2e-tests:
    name: Docker Compose E2E Tests
    needs: build-ev-node-evm-single-image
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update docker-compose.yml to use PR image
        run: |
          cd apps/evm/single
          # Replace the main image tag with PR-specific tag
          sed -i 's|ghcr.io/evstack/ev-node-evm-single:main|ghcr.io/${{ github.repository_owner }}/ev-node-evm-single:${{ inputs.image-tag }}|g' docker-compose.yml
          echo "Updated docker-compose.yml to use image: ghcr.io/${{ github.repository_owner }}/ev-node-evm-single:${{ inputs.image-tag }}"
      - name: Pull required images
        run: |
          cd apps/evm/single
          docker compose pull

      - name: Start Docker Compose services
        run: |
          cd apps/evm/single
          docker compose up -d
          echo "Started docker-compose services"
      - name: Wait for services to be ready
        run: |
          echo "Waiting for all services to be healthy..."
          cd apps/evm/single
          
          # Wait for all services to be healthy (Docker Compose health checks)
          timeout 180s bash -c '
            while true; do
              echo "Checking service health status..."
              docker compose ps
              
              # Check if all services are healthy by counting healthy services
              healthy_services=$(docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep -i "healthy" | wc -l)
              total_services=3  # rollkit-reth, local-da, rollkit-evm-single
              
              if [ "$healthy_services" -eq "$total_services" ]; then
                echo "✅ All $total_services services are healthy!"
                break
              fi
              
              echo "⏳ $healthy_services/$total_services services are healthy, waiting..."
              sleep 10
            done
          '
          
          # Display final status  
          echo "=== Final Service Status ==="
          docker compose ps

      - name: Run comprehensive Docker Compose E2E tests
        run: |
          # Run the comprehensive Go-based e2e test
          cd test/e2e
          echo "Running comprehensive Docker Compose E2E tests..."
          go test -v -timeout=10m -tags='evm' -run TestDockerComposeE2E ./...
        env:
          # Ensure test can find the EVM at the expected Docker Compose ports
          EVM_ENDPOINT: "http://localhost:8545"
          DA_ENDPOINT: "http://localhost:7980"

      - name: Display container logs on failure
        if: failure()
        run: |
          cd apps/evm/single
          echo "=== Container Status ==="
          docker compose ps

          echo "=== Rollkit Reth Logs ==="
          docker compose logs rollkit-reth

          echo "=== Local DA Logs ==="
          docker compose logs local-da

          echo "=== Rollkit EVM Single Logs ==="
          docker compose logs rollkit-evm-single

      - name: Cleanup
        if: always()
        run: |
          cd apps/evm/single
          docker compose down -v
          docker system prune -f

  build_all-apps:
    name: Build All ev-node Binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - name: Build all ev-node binaries
        run: make build-all

  go_mod_tidy_check:
    name: Go Mod Tidy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - run: make tidy-all
      - name: check for diff
        run: git diff --exit-code

  unit_test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - name: Run unit test
        run: make test-cover
      - name: Upload unit test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage-report-${{ github.sha }}
          path: ./coverage.txt

  integration_test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - name: Run integration test
        run: make test-integration-cover
      - name: Upload integration test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage-report-${{ github.sha }}
          path: ./node/coverage.txt

  e2e-tests:
    name: Run E2E System Tests
    needs: build_all-apps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - name: E2E Tests
        run: make test-e2e

  evm-tests:
    name: Run EVM Execution Tests
    needs: build_all-apps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: ./go.mod
      - name: EVM Tests
        run: make test-evm

  combine_and_upload_coverage:
    name: Combine and Upload Coverage
    needs: [unit_test, integration_test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      - name: Download unit test coverage report
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage-report-${{ github.sha }}
          path: ./unit-coverage
      - name: Download integration test coverage report
        uses: actions/download-artifact@v4
        with:
          name: integration-test-coverage-report-${{ github.sha }}
          path: ./integration-coverage
      - name: Upload combined coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-coverage/coverage.txt,./integration-coverage/coverage.txt
          flags: combined
