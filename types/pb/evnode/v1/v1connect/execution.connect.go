// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: evnode/v1/execution.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/evstack/ev-node/types/pb/evnode/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExecutorServiceName is the fully-qualified name of the ExecutorService service.
	ExecutorServiceName = "evnode.v1.ExecutorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExecutorServiceInitChainProcedure is the fully-qualified name of the ExecutorService's InitChain
	// RPC.
	ExecutorServiceInitChainProcedure = "/evnode.v1.ExecutorService/InitChain"
	// ExecutorServiceGetTxsProcedure is the fully-qualified name of the ExecutorService's GetTxs RPC.
	ExecutorServiceGetTxsProcedure = "/evnode.v1.ExecutorService/GetTxs"
	// ExecutorServiceExecuteTxsProcedure is the fully-qualified name of the ExecutorService's
	// ExecuteTxs RPC.
	ExecutorServiceExecuteTxsProcedure = "/evnode.v1.ExecutorService/ExecuteTxs"
	// ExecutorServiceSetFinalProcedure is the fully-qualified name of the ExecutorService's SetFinal
	// RPC.
	ExecutorServiceSetFinalProcedure = "/evnode.v1.ExecutorService/SetFinal"
)

// ExecutorServiceClient is a client for the evnode.v1.ExecutorService service.
type ExecutorServiceClient interface {
	// InitChain initializes a new blockchain instance with genesis parameters
	InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error)
	// GetTxs fetches available transactions from the execution layer's mempool
	GetTxs(context.Context, *connect.Request[v1.GetTxsRequest]) (*connect.Response[v1.GetTxsResponse], error)
	// ExecuteTxs processes transactions to produce a new block state
	ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error)
	// SetFinal marks a block as finalized at the specified height
	SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[v1.SetFinalResponse], error)
}

// NewExecutorServiceClient constructs a client for the evnode.v1.ExecutorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExecutorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExecutorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	executorServiceMethods := v1.File_evnode_v1_execution_proto.Services().ByName("ExecutorService").Methods()
	return &executorServiceClient{
		initChain: connect.NewClient[v1.InitChainRequest, v1.InitChainResponse](
			httpClient,
			baseURL+ExecutorServiceInitChainProcedure,
			connect.WithSchema(executorServiceMethods.ByName("InitChain")),
			connect.WithClientOptions(opts...),
		),
		getTxs: connect.NewClient[v1.GetTxsRequest, v1.GetTxsResponse](
			httpClient,
			baseURL+ExecutorServiceGetTxsProcedure,
			connect.WithSchema(executorServiceMethods.ByName("GetTxs")),
			connect.WithClientOptions(opts...),
		),
		executeTxs: connect.NewClient[v1.ExecuteTxsRequest, v1.ExecuteTxsResponse](
			httpClient,
			baseURL+ExecutorServiceExecuteTxsProcedure,
			connect.WithSchema(executorServiceMethods.ByName("ExecuteTxs")),
			connect.WithClientOptions(opts...),
		),
		setFinal: connect.NewClient[v1.SetFinalRequest, v1.SetFinalResponse](
			httpClient,
			baseURL+ExecutorServiceSetFinalProcedure,
			connect.WithSchema(executorServiceMethods.ByName("SetFinal")),
			connect.WithClientOptions(opts...),
		),
	}
}

// executorServiceClient implements ExecutorServiceClient.
type executorServiceClient struct {
	initChain  *connect.Client[v1.InitChainRequest, v1.InitChainResponse]
	getTxs     *connect.Client[v1.GetTxsRequest, v1.GetTxsResponse]
	executeTxs *connect.Client[v1.ExecuteTxsRequest, v1.ExecuteTxsResponse]
	setFinal   *connect.Client[v1.SetFinalRequest, v1.SetFinalResponse]
}

// InitChain calls evnode.v1.ExecutorService.InitChain.
func (c *executorServiceClient) InitChain(ctx context.Context, req *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error) {
	return c.initChain.CallUnary(ctx, req)
}

// GetTxs calls evnode.v1.ExecutorService.GetTxs.
func (c *executorServiceClient) GetTxs(ctx context.Context, req *connect.Request[v1.GetTxsRequest]) (*connect.Response[v1.GetTxsResponse], error) {
	return c.getTxs.CallUnary(ctx, req)
}

// ExecuteTxs calls evnode.v1.ExecutorService.ExecuteTxs.
func (c *executorServiceClient) ExecuteTxs(ctx context.Context, req *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error) {
	return c.executeTxs.CallUnary(ctx, req)
}

// SetFinal calls evnode.v1.ExecutorService.SetFinal.
func (c *executorServiceClient) SetFinal(ctx context.Context, req *connect.Request[v1.SetFinalRequest]) (*connect.Response[v1.SetFinalResponse], error) {
	return c.setFinal.CallUnary(ctx, req)
}

// ExecutorServiceHandler is an implementation of the evnode.v1.ExecutorService service.
type ExecutorServiceHandler interface {
	// InitChain initializes a new blockchain instance with genesis parameters
	InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error)
	// GetTxs fetches available transactions from the execution layer's mempool
	GetTxs(context.Context, *connect.Request[v1.GetTxsRequest]) (*connect.Response[v1.GetTxsResponse], error)
	// ExecuteTxs processes transactions to produce a new block state
	ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error)
	// SetFinal marks a block as finalized at the specified height
	SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[v1.SetFinalResponse], error)
}

// NewExecutorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExecutorServiceHandler(svc ExecutorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	executorServiceMethods := v1.File_evnode_v1_execution_proto.Services().ByName("ExecutorService").Methods()
	executorServiceInitChainHandler := connect.NewUnaryHandler(
		ExecutorServiceInitChainProcedure,
		svc.InitChain,
		connect.WithSchema(executorServiceMethods.ByName("InitChain")),
		connect.WithHandlerOptions(opts...),
	)
	executorServiceGetTxsHandler := connect.NewUnaryHandler(
		ExecutorServiceGetTxsProcedure,
		svc.GetTxs,
		connect.WithSchema(executorServiceMethods.ByName("GetTxs")),
		connect.WithHandlerOptions(opts...),
	)
	executorServiceExecuteTxsHandler := connect.NewUnaryHandler(
		ExecutorServiceExecuteTxsProcedure,
		svc.ExecuteTxs,
		connect.WithSchema(executorServiceMethods.ByName("ExecuteTxs")),
		connect.WithHandlerOptions(opts...),
	)
	executorServiceSetFinalHandler := connect.NewUnaryHandler(
		ExecutorServiceSetFinalProcedure,
		svc.SetFinal,
		connect.WithSchema(executorServiceMethods.ByName("SetFinal")),
		connect.WithHandlerOptions(opts...),
	)
	return "/evnode.v1.ExecutorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExecutorServiceInitChainProcedure:
			executorServiceInitChainHandler.ServeHTTP(w, r)
		case ExecutorServiceGetTxsProcedure:
			executorServiceGetTxsHandler.ServeHTTP(w, r)
		case ExecutorServiceExecuteTxsProcedure:
			executorServiceExecuteTxsHandler.ServeHTTP(w, r)
		case ExecutorServiceSetFinalProcedure:
			executorServiceSetFinalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExecutorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExecutorServiceHandler struct{}

func (UnimplementedExecutorServiceHandler) InitChain(context.Context, *connect.Request[v1.InitChainRequest]) (*connect.Response[v1.InitChainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ExecutorService.InitChain is not implemented"))
}

func (UnimplementedExecutorServiceHandler) GetTxs(context.Context, *connect.Request[v1.GetTxsRequest]) (*connect.Response[v1.GetTxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ExecutorService.GetTxs is not implemented"))
}

func (UnimplementedExecutorServiceHandler) ExecuteTxs(context.Context, *connect.Request[v1.ExecuteTxsRequest]) (*connect.Response[v1.ExecuteTxsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ExecutorService.ExecuteTxs is not implemented"))
}

func (UnimplementedExecutorServiceHandler) SetFinal(context.Context, *connect.Request[v1.SetFinalRequest]) (*connect.Response[v1.SetFinalResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("evnode.v1.ExecutorService.SetFinal is not implemented"))
}
